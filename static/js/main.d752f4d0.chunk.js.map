{"version":3,"sources":["hooks/usePwa2/index.ts","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["usePwa2","usePwa","appinstalled","canInstallprompt","enabledPwa","enabledUpdate","isLoading","isPwa","showInstallPrompt","unregister","enabledInstall","useMemo","enabledUpdate2","installPwa","isLoading2","updatePwa","App","handleUpdate","useCallback","a","window","location","reload","disabled","onClick","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.d752f4d0.chunk.js","sourcesContent":["import { useMemo } from \"react\";\nimport usePwa from \"use-pwa\";\n\nexport type Pwa2Data = {\n  enabledInstall: boolean;\n  enabledUpdate: boolean;\n  installPwa: () => void;\n  isLoading: boolean;\n  updatePwa: () => Promise<boolean | undefined>;\n};\n\nfunction usePwa2(): Pwa2Data {\n  const {\n    appinstalled,\n    canInstallprompt,\n    enabledPwa,\n    enabledUpdate,\n    isLoading,\n    isPwa,\n    showInstallPrompt,\n    unregister,\n  } = usePwa();\n  const enabledInstall = useMemo<Pwa2Data[\"enabledInstall\"]>(\n    () => !appinstalled && canInstallprompt && enabledPwa && !isPwa,\n    [appinstalled, canInstallprompt, enabledPwa, isPwa]\n  );\n  const enabledUpdate2 = useMemo<Pwa2Data[\"enabledUpdate\"]>(\n    () => enabledUpdate && isPwa,\n    [enabledUpdate, isPwa]\n  );\n  const installPwa = useMemo<Pwa2Data[\"installPwa\"]>(\n    () => showInstallPrompt,\n    [showInstallPrompt]\n  );\n  const isLoading2 = useMemo<Pwa2Data[\"isLoading\"]>(\n    () => isLoading,\n    [isLoading]\n  );\n  const updatePwa = useMemo<Pwa2Data[\"updatePwa\"]>(\n    () => unregister,\n    [unregister]\n  );\n\n  return {\n    enabledInstall,\n    installPwa,\n    updatePwa,\n    enabledUpdate: enabledUpdate2,\n    isLoading: isLoading2,\n  };\n}\n\nexport default usePwa2;\n","import React, { useCallback } from \"react\";\nimport usePwa2 from \"hooks/usePwa2\";\n\nfunction App() {\n  const { enabledInstall, enabledUpdate, installPwa, isLoading, updatePwa } =\n    usePwa2();\n  const handleUpdate = useCallback(async () => {\n    const result = await updatePwa();\n\n    // Update failure\n    if (!result) {\n      return;\n    }\n\n    window.location.reload();\n  }, [updatePwa]);\n\n  return isLoading ? (\n    <p>Loading...</p>\n  ) : (\n    <div>\n      <button disabled={!enabledInstall} onClick={installPwa}>\n        Install PWA\n      </button>\n      <button disabled={!enabledUpdate} onClick={handleUpdate}>\n        Update PWA\n      </button>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}